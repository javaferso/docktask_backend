name: CI/CD Deploy to EC2

on:
  push:
    branches: [main]    # Puedes cambiar a otra rama si lo prefieres

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
  EC2_HOST: ${{ secrets.EC2_HOST }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # (Opcional) Instala dependencias y corre tests antes de deployar
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Show workspace structure
        run: |
          pwd
          ls -l
      - name: List subfolders
        run: ls -l ${{ github.workspace }}

      # tests
      - name: Run backend tests
        run: |
          echo "PYTHONPATH=."
          PYTHONPATH=. pytest tests/

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # (Opcional) Copia el archivo .env.example como .env si lo necesitas (puedes adaptar según tu setup)
      # - name: Upload .env to EC2
      #   run: |
      #     scp -o StrictHostKeyChecking=no src/.env.example ${{ secrets.EC2_HOST }}:/ruta/a/tu/app/.env

      - name: Deploy to EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ubuntu/docktask  #ruta
            git pull origin main
            docker compose down || true
            docker compose up -d --build
            docker compose exec web flask db upgrade
          EOF

      # Notificación opcional (Slack, Discord, etc) aquí si lo deseas
      - name: Notify Discord (success)
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \":white_check_mark: Deploy to EC2 succeeded on branch $GITHUB_REF by $GITHUB_ACTOR\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
      
      - name: Notify Discord (failure)
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \":x: Deploy to EC2 **FAILED** on branch $GITHUB_REF by $GITHUB_ACTOR\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

